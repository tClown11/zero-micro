// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tUserFieldNames          = builder.RawFieldNames(&TUser{}, true)
	tUserRows                = strings.Join(tUserFieldNames, ",")
	tUserRowsExpectAutoSet   = strings.Join(stringx.Remove(tUserFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	tUserRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(tUserFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))

	cachePublicTUserIdPrefix     = "cache:public:tUser:id:"
	cachePublicTUserMobilePrefix = "cache:public:tUser:mobile:"
)

type (
	tUserModel interface {
		Insert(ctx context.Context, data *TUser) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TUser, error)
		FindOneByMobile(ctx context.Context, mobile string) (*TUser, error)
		Update(ctx context.Context, data *TUser) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTUserModel struct {
		sqlc.CachedConn
		table string
	}

	TUser struct {
		Id         int64     `db:"id"`
		Username   string    `db:"username"`
		Avatar     string    `db:"avatar"`
		Mobile     string    `db:"mobile"`
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
	}
)

func newTUserModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultTUserModel {
	return &defaultTUserModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      `"public"."t_user"`,
	}
}

func (m *defaultTUserModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	publicTUserIdKey := fmt.Sprintf("%s%v", cachePublicTUserIdPrefix, id)
	publicTUserMobileKey := fmt.Sprintf("%s%v", cachePublicTUserMobilePrefix, data.Mobile)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where id = $1", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, publicTUserIdKey, publicTUserMobileKey)
	return err
}

func (m *defaultTUserModel) FindOne(ctx context.Context, id int64) (*TUser, error) {
	publicTUserIdKey := fmt.Sprintf("%s%v", cachePublicTUserIdPrefix, id)
	var resp TUser
	err := m.QueryRowCtx(ctx, &resp, publicTUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", tUserRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTUserModel) FindOneByMobile(ctx context.Context, mobile string) (*TUser, error) {
	publicTUserMobileKey := fmt.Sprintf("%s%v", cachePublicTUserMobilePrefix, mobile)
	var resp TUser
	err := m.QueryRowIndexCtx(ctx, &resp, publicTUserMobileKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where mobile = $1 limit 1", tUserRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, mobile); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTUserModel) Insert(ctx context.Context, data *TUser) (sql.Result, error) {
	publicTUserIdKey := fmt.Sprintf("%s%v", cachePublicTUserIdPrefix, data.Id)
	publicTUserMobileKey := fmt.Sprintf("%s%v", cachePublicTUserMobilePrefix, data.Mobile)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3)", m.table, tUserRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Username, data.Avatar, data.Mobile)
	}, publicTUserIdKey, publicTUserMobileKey)
	return ret, err
}

func (m *defaultTUserModel) Update(ctx context.Context, newData *TUser) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	publicTUserIdKey := fmt.Sprintf("%s%v", cachePublicTUserIdPrefix, data.Id)
	publicTUserMobileKey := fmt.Sprintf("%s%v", cachePublicTUserMobilePrefix, data.Mobile)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, tUserRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Id, newData.Username, newData.Avatar, newData.Mobile)
	}, publicTUserIdKey, publicTUserMobileKey)
	return err
}

func (m *defaultTUserModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cachePublicTUserIdPrefix, primary)
}

func (m *defaultTUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", tUserRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTUserModel) tableName() string {
	return m.table
}
